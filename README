
NAME
  Parallelize - Dependency defined bash scheduler

USAGE
  plize [-h] [-c CPUs] [-d] [-q] [-t subdep] [-v | -vv] [-l log] [-o ofile] [file]

  Reads a TASKS AND DEPENDENCIES LIST specification via STDIN if no [file]
  specified.

  Returns 0 if all tasks succeed or the error number of the failing task.
  The scheduler stops if any task fails but will not stop any already
  running tasks.

OPTIONS
  -h       Help/manual
  -c       CPU/threads/process limit
  -d       Dry run
  -q       Quiet prefixed task info for all job output
  -t subid Top dependency tree override with sub-dependency id
  -v       Verbose runtime details
  -vv      Verbose plus dependency tree details
  -l       Logfile verbose messages are appended
  -o ofile Write a standalone runable script to ofile
  file     specification file

TASKS AND DEPENDENCIES LIST Syntax:

  A list containing multiple lines of TASK DEFINITIONS,
  SUB DEPENDENCY definitions, and a main DEPENDENCY DEFINITION.

  Example 1:

# A COMMENT
task1 echo hello world
task2 git clone stuff; sleep && date
task3 cargo build | cat -n
=subtask (+ task2 task3)
(* task1 =subtask)

  Example 2:

aa echo hello
bb echo world
=sub (+ aa bb)
cc echo done
(* =sub cc)


TASK DEFINITION Syntax:

    taskId bash-expression

  A task definition is a line with two parts:  A unique task ID followed by
  a bash expression.  The bash-expression must be one line with no line
  breaks.  It may be a compound expression IE with semicolons, pipes, etc.

  The task IDs are used in the dependency tree definitions.

  Example:

    task1 sleep 1; echo hello world | xxd

SUB DEPENDENCY DEFINITION Syntax:

    =taskId dependency-definition

  A sub-dependency definition is a line with two parts:  A unique sub-task ID,
  prefied with an equals "=" character, and a DEPENDENCY DEFINITION.  SUB
  DEPENDENCIES can include other SUB DEPENDENCIES but cycles are not allowed.

  Example:

    taska echo a
    taskb echo b
    taskc echo c
    =dep1 (+ taska taskb)
    =dep2 (* dep1)
    =dep3 (* =dep1 =dep2 c)
    (+ =dep1 =dep3 c)


DEPENDENCY DEFINITION Syntax:

    sexpr

  A parenthesized prefix-style LISP expression containing
  TASK DEFINITION Ids and SUB DEPENDENCY Ids, grouped with the following
  operators:

    *  parallel scheduled operator
    +  sequenced scheduled operator

  Example (Assume 6 existing tasks labeled A through F):

    = (* A (+ B (* C D) A E) F)

  The above will run A and F in parallel along with the middle group
  (+ B (* C D) E A).  The middle group runs sequentally B followed by (* C D),
  where C and D run in parallel, and finally E with A already having run.

  TASK DEFINITION Ids can be used more than once in the tree but will only
  run one.  SUB DEPENDENCY ids can be used more than once as well with the
  tasks only being run once as well.


COMMAND LINE EXAMPLES

echo -e "a echo hello\nb echo world\n= (* a b)" | plize

./plize <<<'
a echo hello
b echo world
(* a b)
'

cat >specfile <<HEREDOC
(+ c (* a b))
a echo hello
b echo world
c echo ok
HEREDOC
./plize -c 8 -vv -o script.sh -l log.out specfile
./script.sh
cat log.out

