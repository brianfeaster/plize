#!/bin/bash

function main () {
    local - # set applies to function only
    set +e +m -f # no exit on error, no monitor jobs mode, no pathname expansion

    local NORM RED GREEN YELLOW CYAN IRED IGREEN IMAGENTA WHITE
    local help=0
    local dryrun=0
    local quiet=0
    local debug=0
    local -i cpus=2
    local specfile=""
    local logfile=""
    local outputscript=""
    local topdependency="=top"
    parseCommandArgs "$*"

    ((help)) && help && return
    [ "$logfile" ] || setColors
    [ "$specfile" ] && { [ -e "$specfile" ] && exec <$specfile || throwInvalidFile; }

    local -A taskStates=() tasksTimeStarted=() sheap=(@ 0)
    readParseConfiguration
    validateDependencyTree

    ((dryrun)) && { ((debug)) && prettyPrintEverything; return; }
    [ "$outputscript" ] && generateStandaloneScript || startScheduler
}

########################################

function setColors () {
  NORM=$'\e[m'
  RED=$'\e[0;31m'
  GREEN=$'\e[0;32m'
  YELLOW=$'\e[0;33m'
  CYAN=$'\e[0;36m'
  IRED=$'\e[1;31m'
  IGREEN=$'\e[1;32m'
  IMAGENTA=$'\e[1;35m'
  WHITE=$'\e[1;37m'
}

function parseCommandArgs () {
  local s
  while read s
  do case $s in
    (-h) help=1 ;;
    (-c) read cpus ;;
    (-d) dryrun=1 ;;
    (-q) quiet=1 ;;
    (-t) read topdependency; topdependency==${topdependency/#=} ;;
    (-v) debug=1 ;;
    (-vv) debug=2 ;;
    (-l) read logfile ;;
    (-o) read outputscript ;;
    (*) specfile=$s ;;
  esac done < <(tr " " "\n" <<<$*)
}

########################################

function help () {
    cat <<BLOCK

NAME
  Parallelize - Dependency defined bash scheduler

USAGE
  plize [-h] [-c CPUs] [-d] [-q] [-t subdep] [-v | -vv] [-l log] [-o ofile] [file]

  Reads a TASKS AND DEPENDENCIES LIST specification via STDIN if no [file]
  specified.

  Returns 0 if all tasks succeed or the error number of the failing task.
  The scheduler stops if any task fails but will not stop any already
  running tasks.

OPTIONS
  -h       Help/manual
  -c       CPU/threads/process limit
  -d       Dry run
  -q       Quiet prefixed task info for all job output
  -t subid Top dependency tree override with sub-dependency id
  -v       Verbose runtime details
  -vv      Verbose runtime plus dependency tree details
  -l file  Log file log messages (-v and -vv) are appended
  -o file  Output a standalone runable script to file
  file     Filename containing tasks and dependencies list

TASKS AND DEPENDENCIES LIST Syntax:

  A list containing multiple lines of TASK DEFINITIONS,
  SUB DEPENDENCY definitions, and a main DEPENDENCY DEFINITION.

  Example 1:

# A COMMENT
task1 echo hello world
task2 git clone stuff; sleep && date
task3 cargo build | cat -n
=subtask (+ task2 task3)
(* task1 =subtask)

  Example 2:

aa echo hello
bb echo world
=sub (+ aa bb)
cc echo done
(* =sub cc)


TASK DEFINITION Syntax:

    taskId bash-expression

  A task definition is a line with two parts:  A unique task ID followed by
  a bash expression.  The bash-expression must be one line with no line
  breaks.  It may be a compound expression IE with semicolons, pipes, etc.

  The task IDs are used in the dependency tree definitions.

  Example:

    task1 sleep 1; echo hello world | xxd

SUB DEPENDENCY DEFINITION Syntax:

    =taskId dependency-definition

  A sub-dependency definition is a line with two parts:  A unique sub-task ID,
  prefied with an equals "=" character, and a DEPENDENCY DEFINITION.  SUB
  DEPENDENCIES can include other SUB DEPENDENCIES but cycles are not allowed.

  Example:

    taska echo a
    taskb echo b
    taskc echo c
    =dep1 (+ taska taskb)
    =dep2 (* dep1)
    =dep3 (* =dep1 =dep2 c)
    (+ =dep1 =dep3 c)


DEPENDENCY DEFINITION Syntax:

    sexpr

  A parenthesized prefix-style LISP expression containing
  TASK DEFINITION Ids and SUB DEPENDENCY Ids, grouped with the following
  operators:

    *  parallel scheduled operator
    +  sequenced scheduled operator

  Example (Assume 6 existing tasks labeled A through F):

    = (* A (+ B (* C D) A E) F)

  The above will run A and F in parallel along with the middle group
  (+ B (* C D) E A).  The middle group runs sequentally B followed by (* C D),
  where C and D run in parallel, and finally E with A already having run.

  TASK DEFINITION Ids can be used more than once in the tree but will only
  run one.  SUB DEPENDENCY ids can be used more than once as well with the
  tasks only being run once as well.


COMMAND LINE EXAMPLES

echo -e "a echo hello\nb echo world\n= (* a b)" | plize

./plize <<<'
a echo hello
b echo world
(* a b)
'

cat >specfile <<HEREDOC
(+ c (* a b))
a echo hello
b echo world
c echo ok
HEREDOC
./plize -c 8 -vv -o script.sh -l log.out specfile
./script.sh
cat log.out

BLOCK
}

########################################

function assertSheapKeyFree () {
  [ "${sheap[$key]}" ] && throwDependencyOrTaskCollision
  true
}

function internKeyValueAsTask () {
  assertSheapKeyFree
  sheap[$key]=$value
  taskStates[$key]=ready
  tasksTimeStarted[$key]=0
}

function readParseConfiguration () {
  local key value
  while read -r key value
  do
    case "${key:0:1}" in
      (""|"#") # comment or blank line
        ;;
      ("(") # intern top dependency
        value="$key $value"
        key="=top"
        assertSheapKeyFree
        sparse =top "$value"
        ;;
      (=) # intern sub dependency
        assertSheapKeyFree
        sparse $key "$value"
        ;;
      (*) # intern task
        internKeyValueAsTask
        ;;
    esac
  done
}

function sparse () {
  local N=$'\n' sym=$1 toks=$2

  # Preprocess tokens onto separate lines
  toks=${toks//(/$N($N}
  toks=${toks//)/$N)$N}
  toks=${toks// /$N}

  _sparse $sym <<<$toks
}

function _sparse () {
  local token sym=$1 pad=""
  while read -r token
  do
    case $token in
      ('') continue ;; # skip empty lines
      ('(') # add list ref, recursively create list
        sheap[$sym]+=$pad@$((sheap['@']))
        _sparse $((sheap['@']++))
        ;;
      (')') return ;; # end of list, return from recursion
      (*) sheap[$sym]+=$pad$token ;; # add token to list, continue looping
    esac
    pad=" "
  done
}


function validateDependencyTree () {
  local -A subs
  _validateDependencyTree $topdependency
}

function _validateDependencyTree () {
  local task tasks
  read task tasks <<<$1
  if [ "$tasks" ]
  then # Verify dependency expression
    # Verify op
    [ "${task/[*+]}" ] && throwUnknownOp
    # Recursively verify list of tasks/subtasks
    for task in $tasks
    do
      _validateDependencyTree $task
    done
  else # Verify single task or subtask or list ref
    case "${task:0:1}" in
     (@)
       _validateDependencyTree "${sheap[${task:1}]}"
       ;;
     (=)
       [ "${sheap[$task]}" ] || throwDependencyUnknownOrTask
       ((subs[$task])) && throwDependencyCycle
       subs[$task]=1
         _validateDependencyTree ${sheap[$task]}
       unset subs[$task]
       ;;
     (*)
       [ "${task//[0-9]/}" ] && [ "${sheap[$task]}" ] || throwDependencyUnknownOrTask
       ;;
    esac
  fi
}

########################################

function generateStandaloneScript () {
  {
    printf '#!/bin/bash\n'
    printf 'function main () {\nlocal -\nset +e +m -f\n'
    declare -p NORM RED GREEN YELLOW CYAN IRED IGREEN IMAGENTA WHITE quiet debug cpus logfile topdependency taskStates tasksTimeStarted sheap
    printf 'startScheduler\n}\n'
    declare -f startScheduler spawnMaxCpus spawnNextReady spawnNextReadyNode spawnNextReadyList spawnTask waitForAnyTask prettyPrintEverything colorizeTaskState _prettyPrintEverything prettyPrintGraph _prettyPrintGraph reportTaskFail reportSpawned reportWaitingOnPid reportTaskCompleted
    echo main
  } > $outputscript
  chmod u+x $outputscript
}

########################################

function startScheduler () {
  local pid2task=() errnum=0
  ((debug)) && prettyPrintEverything
  spawnMaxCpus
  while waitForAnyTask
  do
    spawnMaxCpus
  done
  ((debug)) && prettyPrintEverything
  return $errnum
}

function spawnMaxCpus () {
  while ((${#pid2task[*]} < cpus))
  do
    spawnNextReady $topdependency || break
  done
}

function spawnNextReady () {
  local task tasks
  read task tasks <<<$1
  if [ "$tasks" ]
  then
   spawnNextReadyList
  else
    spawnNextReadyNode
  fi
}

function spawnNextReadyList () {
  local op=$task tasksFinished=1
  for task in $tasks
  do
    spawnNextReady $task
    case $op in
    ('*')
        case $? in
          (0) return 0 ;; # spawned (stop looking)
          (1) tasksFinished=0 ;; # running , keep looking (also no longer assume all tasks finished)
          (2) ;; # already finished, keep looking
          (3) return $? # failure detected (halt scheduler)
        esac
      ;;
    ('+')
        case $? in
          (2) ;; # finished task, keep looking
          (*) return $? ;; # either spawned (stop looking), running (need to wait), failed (halt scheduler)
        esac
      ;;
    esac
  done
  return $((tasksFinished ? 2 : 1))
}

function spawnNextReadyNode () {
  case ${task:0:1} in
    (=) # follow sub dependency
      spawnNextReady "${sheap[$task]}"
      ;;
    (@) # follow list ref
      spawnNextReady "${sheap[${task:1}]}"
      ;;
    (*) # maybe spawn task
      case ${taskStates[$task]} in
        (ready) spawnTask; return 0 ;; # success (search stops)
        (running) return 1 ;;
        (finished) return 2 ;;
        (failed|*) return 3 ;;
      esac
      ;;
  esac
}

function spawnTask () {
  local taskCmd="${sheap[$task]}"
  if ((quiet))
  then
    eval "$taskCmd" &
  else
    eval "{ $taskCmd ; } \
      2> >(while read -r l; do echo   \"$RED[$BASHPID:$task]$NORM \$l\"; done) \
      1> >(while read -r l; do echo \"$GREEN[$BASHPID:$task]$NORM \$l\"; done)" \
      &
  fi
  pid2task[$!]=$task
  taskStates[$task]=running
  tasksTimeStarted[$task]=$SECONDS
  ((debug)) && reportSpawned
}

function waitForAnyTask () {
    local pid task taskCmd runtime errnum

    ((${#pid2task[@]})) || return 255
    ((debug)) && reportWaitingOnPid

    wait -p pid -n ${!pid2task[@]}

    errnum=$?
    task=${pid2task[$pid]}
    unset pid2task[$pid]
    taskCmd=${sheap[$task]}
    runtime=$((SECONDS-tasksTimeStarted[task]))

    if ((errnum))
    then
        taskStates[$task]="failed"
        reportTaskFail
        return $errnum
    else
        taskStates[$task]="finished"
        ((debug)) && reportTaskCompleted
        return 0
    fi
}

########################################

function prettyPrintEverything () {
    local expand=1
    [ "$logfile" ] && _prettyPrintEverything >>$logfile || _prettyPrintEverything
    prettyPrintGraph
}

function colorizeTaskState () {
  case $1 in
    (running) printf "$YELLOW$1$NORM" ;;
    (finished) printf "$IGREEN$1$NORM" ;;
    (failed) printf "$IRED$1$NORM" ;;
    (ready|*) printf "$1"
  esac
}

function _prettyPrintEverything () {
    local k key expand=0

    echo -e "$WHITE--Tasks--------$NORM"
    for k in $(sort <(tr \  \\n <<<${!sheap[@]}))
    do
      case ${k:0:1} in
        ([@=0123456789]) : ;;
        (*) echo " $WHITE$k$NORM $(colorizeTaskState ${taskStates[$k]}) $NORM${sheap[$k]}" ;;
      esac
    done

    if (( ${#dependencies[*]} | 1))
    then
      echo -ne "$WHITE--Dependencies--------$NORM\n"
      for key in ${!sheap[*]}
      do
        [ ${key} != =top ] && [ "${key:0:1}" == = ] \
            && printf " $CYAN$key$NORM $(_prettyPrintGraph ${sheap[$key]})\n"
      done
      printf " $(_prettyPrintGraph ${sheap[=top]})\n"
    fi

    echo -ne "$WHITE--Scheduled--------$NORM\n"
}

function prettyPrintGraph () {
  local s=" "
  [ "$topdependency" == =top ] || s+="$topdependency "
  s+=$(_prettyPrintGraph $topdependency)
  [ "$logfile" ] && echo "$s" >>$logfile || echo "$s"
}

function _prettyPrintGraph () {
  local s=$1 v pad=""

  case ${s:0:1} in
    (@)
      printf "("
      for v in ${sheap[${s:1}]}
      do
        printf "$pad"
        _prettyPrintGraph $v
        pad=' '
      done
      printf ")"
      ;;
    (=)
      ((expand)) && _prettyPrintGraph "${sheap[$s]}" || printf "$CYAN$s$NORM"
      ;;
    (*)
      case ${taskStates[$s]} in
        (running) printf "$YELLOW$s$NORM" ;;
        (finished) printf "$IGREEN$s$NORM" ;;
        (failed) printf "$IRED$s$NORM" ;;
        (ready|*) printf "$s" ;;
      esac
      ;;
  esac
}

########################################

function reportTaskFail () {
    local s=s
    local b="$IRED[Exception pid $pid:$task returned $errnum ${runtime} sec${s:0:runtime!=1}]$NORM $taskCmd"
    [ "$logfile" ] && echo "$b" >>$logfile || echo "$b"
}

function reportSpawned () {
    local s="$IMAGENTA[Spawned $!:$task]$NORM $taskCmd"
    [ "$logfile" ] && echo "$s" >>$logfile || echo "$s"
}

function reportWaitingOnPid () {
    local p all=""
    for p in ${!pid2task[*]}
    do
        all+=" $p:${pid2task[$p]}"
    done
    local s=$(
        echo -n "$IMAGENTA[Waiting on ${#pid2task[@]} $all]$NORM "
        local logfile= expand=1
        ((2 <= debug)) && prettyPrintGraph
    )
    [ "$logfile" ] && echo $s >>$logfile || echo $s
}

function reportTaskCompleted () {
    local s=s
    local b=$(
      echo -n "$IGREEN[Completed $pid:$task ${runtime} sec${s:0:runtime!=1}]$NORM $taskCmd "
      local logfile= expand=1
      ((2 <= debug)) && prettyPrintGraph
    )
    [ "$logfile" ] && echo $b >>$logfile || echo $b
}

########################################

function throwInvalidFile () {
    local s="$IRED[Exception invalid file: $specfile]$NORM"
    [ "$logfile" ] && echo $s >>$logfile || echo $s
    exit 2
}

function throwUnknownOp () {
    local s="$IRED[EXCEPTION unknown operator '$task']$NORM "
    [ "$logfile" ] && printf "$s" >>$logfile || printf "$s"
    prettyPrintGraph
    exit 3
}

function throwDependencyOrTaskCollision () {
    local s="$IRED[EXCEPTION dependency collision '$key' '$value'] $NORM\n"
    [ "$logfile" ] && printf "$s" >>$logfile || printf "$s"
    exit 4
}

function throwDependencyCycle () {
    local s="$IRED[EXCEPTION dependency cycle '$token'] $NORM\n"
    [ "$logfile" ] && printf "$s" >>$logfile || printf "$s"
    exit 5
}

function throwDependencyUnknownOrTask () {
    local s="$IRED[EXCEPTION unknown dependency or task '$task'] $NORM\n"
    [ "$logfile" ] && printf "$s" >>$logfile || printf "$s"
    exit 6
}

main "$@"
